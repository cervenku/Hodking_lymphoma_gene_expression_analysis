library(dplyr)
library(stringr)
library(glue)
library(oligo)
library(DT)
library(ggplot2)
library(ggpubr)
source(here("age_library.R"))
group <- pData(norm_data)$sample_group %>% factor()
group <- pData(norm_data)$sample_group %>% factor() %>% relevel("control")
pData(norm_data)
install.packages("AnnotationDbi")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("AnnotationDbi")
library(AnnotationDbi)
library(dendextend)
install.packages("dendextend")
library(dendextend)
groups <- pData(norm_data)$sample_group
norm_data <- rma(raw_data)
featureNames(norm_data) %>% head()
groups <- pData(norm_data)$sample_group
names(groups) <- sampleNames(norm_data)
plot_hc(exprs(norm_data), color_by = groups, color_by_lab = "Sample Group")
source('C:/Users/Lucie/Desktop/VSCHT/AGE/project/age_library.R')
groups <- pData(norm_data)$sample_group
names(groups) <- sampleNames(norm_data)
plot_hc(exprs(norm_data), color_by = groups, color_by_lab = "Sample Group")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("heatmaps")
library(Heatmap)
library(heatmaps)
install.packages("heatmaply")
library(heatmaply)
plot_heatmap(
exprs(norm_data),
n_top_features = 1000,
z_score = TRUE,
column_annotation = dplyr::select(pData(norm_data), sample_group),
title = "Affymetrix",
legend_title = "z-score",
show_row_names = FALSE
)
source('C:/Users/Lucie/Desktop/VSCHT/AGE/project/age_library.R')
plot_heatmap(
exprs(norm_data),
n_top_features = 1000,
z_score = TRUE,
column_annotation = dplyr::select(pData(norm_data), sample_group),
title = "Affymetrix",
legend_title = "z-score",
show_row_names = FALSE
)
source('C:/Users/Lucie/Desktop/VSCHT/AGE/project/age_library.R')
plot_heatmap(
exprs(norm_data),
n_top_features = 1000,
z_score = TRUE,
column_annotation = dplyr::select(pData(norm_data), sample_group),
title = "Affymetrix",
legend_title = "z-score",
show_row_names = FALSE
)
plot_heatmaply(
exprs(norm_data)[1:1000,],
z_score = TRUE,
column_annotation = dplyr::select(pData(norm_data), sample_group)
)
library(clariomshumantranscriptcluster.db)
clariomshumantranscriptcluster.db
AnnotationDbi::keys(clariomshumantranscriptcluster.db) %>% head()
feature_data <- AnnotationDbi::select(
clariomshumantranscriptcluster.db,
columns = c("PROBEID", "ENSEMBL", "SYMBOL", "GENENAME", "ENTREZID"),
keys = featureNames(norm_data),
keytype = "PROBEID"
)
head(feature_data)
dplyr::filter(!is.na(ENSEMBL))
dplyr::filter(feature_data, !is.na(ENSEMBL))
feature_data
dplyr::filter(feature_data, !is.na(ENSEMBL))
nrow(feature_data)
nrow(dplyr::filter(feature_data, !is.na(ENSEMBL)))
head(feature_data)
nrow(feature_data)
nrow(dplyr::filter(feature_data, !is.na(ENSEMBL)))
(nrow(feature_data),nrow(dplyr::filter(feature_data, !is.na(ENSEMBL))))
nrow(feature_data), nrow(dplyr::filter(feature_data, !is.na(ENSEMBL)))
nrow(feature_data)
nrow(dplyr::filter(feature_data, !is.na(ENSEMBL)))
nrow(dplyr::filter(feature_data, !is.na(ENSEMBL))) / nrow(feature_data)
janitor::get_dupes(feature_data, PROBEID) %>% head()
library(janitor)
install.packages("janitor")
library(janitor)
janitor::get_dupes(feature_data, PROBEID) %>% head()
feature_data_sum <- feature_data %>%
dplyr::group_by(PROBEID) %>%
dplyr::summarise(dplyr::across(c(ENSEMBL, SYMBOL, GENENAME, ENTREZID), ~ str_c(., collapse = ", ")))
library(stringr)
feature_data_sum <- feature_data %>%
dplyr::group_by(PROBEID) %>%
dplyr::summarise(dplyr::across(c(ENSEMBL, SYMBOL, GENENAME, ENTREZID), ~ str_c(., collapse = ", ")))
head(feature_data_sum)
feature_data_sum <- feature_data %>%
dplyr::group_by(PROBEID) %>%
dplyr::summarise(dplyr::across(c(ENSEMBL, SYMBOL, GENENAME, ENTREZID), ~ str_c(., collapse = ", ")))
source('C:/Users/Lucie/Desktop/VSCHT/AGE/project/age_library.R')
feature_data <- dplyr::distinct(feature_data, PROBEID, .keep_all = TRUE)
feature_data <- dplyr::distinct(feature_data, PROBEID, .keep_all = TRUE)
norm_data <- norm_data[feature_data$PROBEID, ]
if (any(feature_data$PROBEID != featureNames(norm_data)))
stop("Feature data mismatch.")
fData(norm_data) <- feature_data
annotation(norm_data) <- "clariomshumantranscriptcluster.db"
featureData(norm_data)
table(is.na(fData(norm_data)$ENSEMBL))
norm_data_avg <- norm_data
fdata_avg <- dplyr::filter(fData(norm_data), !is.na(ENSEMBL))
library(limma)
library(limma)
e_avg <- limma::avereps(exprs(norm_data)[fdata_avg$PROBEID, ], fdata_avg$ENSEMBL)
fdata_avg <- dplyr::distinct(fdata_avg, ENSEMBL, .keep_all = TRUE) %>%
magrittr::set_rownames(.$ENSEMBL)
norm_data_avg <- ExpressionSet(e_avg, phenoData = phenoData(norm_data), featureData = AnnotatedDataFrame(fdata_avg))
norm_data_avg
groups <- pData(norm_data)$sample_group
names(groups) <- sampleNames(norm_data)
plot_hc(exprs(norm_data), color_by = groups, color_by_lab = "Sample Group")
plot_pca(exprs(norm_data), sample_data = pData(norm_data), n_top_features = 1000, color_by = "sample_group", plot_type = "multi")$plot
library(here)
library(dplyr)
library(stringr)
library(glue)
library(oligo)
library(DT)
library(ggplot2)
library(ggpubr)
library(AnnotationDbi)
library(dendextend)
library(heatmaps)
library(heatmaply)
library(janitor)
library(stringr)
library(limma)
source(here("age_library.R"))
plot_pca(exprs(norm_data), sample_data = pData(norm_data), n_top_features = 1000, color_by = "sample_group", plot_type = "multi")$plot
source('C:/Users/Lucie/Desktop/VSCHT/AGE/project/age_library.R')
plot_heatmap(
exprs(norm_data)[1:1000, ],
z_score = TRUE,
column_annotation = dplyr::select(pData(norm_data), sample_group),
title = "Affymetrix",
legend_title = "z-score",
show_row_names = FALSE
)
source('C:/Users/Lucie/Desktop/VSCHT/AGE/project/age_library.R')
source('C:/Users/Lucie/Desktop/VSCHT/AGE/project/age_library.R')
plot_heatmap(
exprs(norm_data)[1:1000, ],
z_score = TRUE,
column_annotation = dplyr::select(pData(norm_data), sample_group),
title = "Affymetrix",
legend_title = "z-score",
show_row_names = FALSE
)
source('C:/Users/Lucie/Desktop/VSCHT/AGE/project/age_library.R')
plot_heatmap(
exprs(norm_data)[1:1000, ],
z_score = TRUE,
column_annotation = dplyr::select(pData(norm_data), sample_group),
title = "Affymetrix",
legend_title = "z-score",
show_row_names = FALSE
)
source('C:/Users/Lucie/Desktop/VSCHT/AGE/project/age_library.R')
plot_heatmap(
exprs(norm_data)[1:1000, ],
z_score = TRUE,
column_annotation = dplyr::select(pData(norm_data), sample_group),
title = "Affymetrix",
legend_title = "z-score",
show_row_names = FALSE
)
source('C:/Users/Lucie/Desktop/VSCHT/AGE/project/age_library.R')
plot_heatmap(
exprs(norm_data)[1:1000, ],
z_score = TRUE,
column_annotation = dplyr::select(pData(norm_data), sample_group),
title = "Affymetrix",
legend_title = "z-score",
show_row_names = FALSE
)
plot_heatmap(
exprs(norm_data),
z_score = TRUE,
column_annotation = dplyr::select(pData(norm_data), sample_group),
title = "Affymetrix",
legend_title = "z-score",
show_row_names = FALSE
)
plot_heatmap(
exprs(norm_data)[1:1000,],
z_score = TRUE,
column_annotation = dplyr::select(pData(norm_data), sample_group),
title = "Affymetrix",
legend_title = "z-score",
show_row_names = FALSE
)
exprs(norm_data)
source('C:/Users/Lucie/Desktop/VSCHT/AGE/project/age_library.R')
plot_heatmap(
exprs(norm_data)[1:1000,],
z_score = TRUE,
column_annotation = dplyr::select(pData(norm_data), sample_group),
title = "Affymetrix",
legend_title = "z-score",
show_row_names = FALSE
)
source('C:/Users/Lucie/Desktop/VSCHT/AGE/project/age_library.R')
plot_heatmap(
exprs(norm_data)[1:1000,],
z_score = TRUE,
column_annotation = dplyr::select(pData(norm_data), sample_group),
title = "Affymetrix",
legend_title = "z-score",
show_row_names = FALSE
)
plot_heatmap(
exprs(norm_data),
n_top_features = 1000,
z_score = TRUE,
column_annotation = dplyr::select(pData(norm_data), sample_group),
title = "Affymetrix",
legend_title = "z-score",
show_row_names = FALSE
)
source('C:/Users/Lucie/Desktop/VSCHT/AGE/project/age_library.R')
source('C:/Users/Lucie/Desktop/VSCHT/AGE/project/age_library.R')
plot_heatmap(
exprs(norm_data),
n_top_features = 1000,
z_score = TRUE,
column_annotation = dplyr::select(pData(norm_data), sample_group),
title = "Affymetrix",
legend_title = "z-score",
show_row_names = FALSE
)
plot_heatmaply(
exprs(norm_data),
z_score = TRUE,
column_annotation = dplyr::select(pData(norm_data), sample_group),
row_annotation = NULL,
main = "Affymetrix",
legend_title = "z-score"
)
exprs(norm_data)[1:10,]
is.na(exprs(norm_data))
table(exprs(norm_data))
summary(exprs(norm_data))
table(is.na(exprs(norm_data)))
table(is.numeric(exprs(norm_data)))
table(class(exprs(norm_data)))
table(typeof(exprs(norm_data)))
n_data <- apply(exprs(norm_data), 2, as.numeric)
n_data <- apply(exprs(norm_data), 2, as.numeric)
plot_heatmap(
exprs(n_data),
n_top_features = 1000,
z_score = TRUE,
column_annotation = dplyr::select(pData(norm_data), sample_group),
title = "Affymetrix",
legend_title = "z-score",
show_row_names = FALSE
)
n_data <- apply(exprs(norm_data), 2, as.numeric)
plot_heatmap(
n_data,
n_top_features = 1000,
z_score = TRUE,
column_annotation = dplyr::select(pData(norm_data), sample_group),
title = "Affymetrix",
legend_title = "z-score",
show_row_names = FALSE
)
pData(norm_data)
group <- pData(norm_data)$sample_group %>% factor() %>% relevel("control")
group <- pData(norm_data)$sample_group %>% factor()
dea_model <- model.matrix(~ group)
colnames(fit)
fit <- lmFit(norm_data, dea_model) %>% eBayes()
colnames(fit)
group <- pData(norm_data)$sample_group %>% factor() %>% factor() %>% relevel("wild type")
dea_model <- model.matrix(~ group)
fit <- lmFit(norm_data, dea_model) %>% eBayes()
colnames(fit)
topTable(fit, coef = "groupLTA_g2")
plot_pca(exprs(norm_data), sample_data = pData(norm_data), n_top_features = 1000, color_by = "sample_group", plot_type = "multi")$plot
plot_heatmap(
exprs(norm_data),
n_top_features = 1000,
z_score = TRUE,
column_annotation = dplyr::select(pData(norm_data), sample_group),
title = "Affymetrix",
legend_title = "z-score",
show_row_names = FALSE
)
plot_heatmaply(
exprs(norm_data),
z_score = TRUE,
column_annotation = dplyr::select(pData(norm_data), sample_group),
row_annotation = NULL,
main = "Affymetrix",
legend_title = "z-score",
showticklabels = c(TRUE, TRUE)
)
n_data <- apply(exprs(norm_data), 2, as.numeric)
plot_heatmaply(
n_data,
z_score = TRUE,
column_annotation = dplyr::select(pData(norm_data), sample_group),
row_annotation = NULL,
main = "Affymetrix",
legend_title = "z-score",
showticklabels = c(TRUE, TRUE)
)
n_data <- apply(exprs(norm_data), 2, as.numeric)
plot_heatmaply(
n_data,
z_score = TRUE,
column_annotation = dplyr::select(pData(norm_data), sample_group),
row_annotation = NULL,
main = "Affymetrix",
legend_title = "z-score",
showticklabels = c(TRUE, TRUE)
)
n_data <- apply(exprs(norm_data), 2, as.numeric)
plot_heatmaply(
as.matrix(n_data),
z_score = TRUE,
column_annotation = dplyr::select(pData(norm_data), sample_group),
row_annotation = NULL,
main = "Affymetrix",
legend_title = "z-score",
showticklabels = c(TRUE, TRUE)
)
n_data <- apply(exprs(norm_data), 2, as.numeric)
plot_heatmaply(
as.matrix(exprs(norm_data)),
z_score = TRUE,
column_annotation = dplyr::select(pData(norm_data), sample_group),
row_annotation = NULL,
main = "Affymetrix",
legend_title = "z-score",
showticklabels = c(TRUE, TRUE)
)
table(typeof(n_data))
plot_heatmaply(
exprs(norm_data),
z_score = TRUE,
column_annotation = dplyr::select(pData(norm_data), sample_group),
row_annotation = NULL,
main = "Affymetrix",
legend_title = "z-score",
showticklabels = c(TRUE, TRUE)
)
plot_heatmaply(
exprs(norm_data),
z_score = TRUE,
column_annotation = dplyr::select(pData(norm_data), sample_group),
row_annotation = NULL,
main = "Affymetrix",
legend_title = "z-score",
showticklabels = c(TRUE, TRUE)
)
plot_heatmaply(
exprs(norm_data),
z_score = TRUE,
column_annotation = dplyr::select(pData(norm_data), sample_group),
row_annotation = NULL,
main = "Affymetrix",
legend_title = "z-score",
showticklabels = c(TRUE, TRUE)
) %>% draw(merge_legend = TRUE)
install.packages("draw")
library(draw)
plot_heatmaply(
exprs(norm_data),
z_score = TRUE,
column_annotation = dplyr::select(pData(norm_data), sample_group),
row_annotation = NULL,
main = "Affymetrix",
legend_title = "z-score",
showticklabels = c(TRUE, TRUE)
) %>% draw(merge_legend = TRUE)
library(draw)
plot_heatmaply(
exprs(norm_data),
z_score = TRUE,
column_annotation = dplyr::select(pData(norm_data), sample_group),
row_annotation = NULL,
main = "Affymetrix",
legend_title = "z-score",
showticklabels = c(TRUE, TRUE)
) %>% draw(merge_legend = TRUE)
plot_heatmaply(
exprs(norm_data),
z_score = TRUE,
column_annotation = dplyr::select(pData(norm_data), sample_group),
row_annotation = NULL,
main = "Affymetrix",
legend_title = "z-score",
showticklabels = c(TRUE, TRUE)
) %>% draw::draw(merge_legend = TRUE)
plot_heatmap(
exprs(norm_data),
n_top_features = 1000,
z_score = TRUE,
column_annotation = dplyr::select(pData(norm_data), sample_group),
title = "Affymetrix",
legend_title = "z-score",
show_row_names = FALSE
) %>% draw(merge_legend = TRUE)
saveRDS(fit, "fit.RDs")
saveRDS(fit, "fit.Rds")
saveRDS(fit, "fit.Rds")
saveRDS(fit, "fit_dea.Rds")
render_report = function(contrast, dataPath) {
rmarkdown::render(
"dea_table_template.Rmd", params = list(
contrast = contrast,
data = dataPath
),
output_file = paste0(contrast, ".html")
)
}
for (contrast_group in colnames(fit)[-1]) {
render_report(contrast=contrast_group, data='fit_dea.Rds')
}
render_report = function(contrast, dataPath) {
rmarkdown::render(
"dea_table_template.Rmd", params = list(
contrast = contrast,
data = dataPath
),
output_file = paste0(contrast, ".html")
)
}
for (contrast_group in colnames(fit)[-1]) {
render_report(contrast=contrast_group, data='fit_dea.Rds')
}
render_report = function(contrast, dataPath) {
rmarkdown::render(
"dea_table_template.Rmd", params = list(
contrast = contrast,
data = dataPath
),
output_file = paste0(contrast, ".html")
)
}
for (contrast_group in colnames(fit)[-1]) {
render_report(contrast=contrast_group, data='fit_dea.Rds')
}
render_report = function(contrast, dataPath) {
rmarkdown::render(
"dea_table_template.Rmd", params = list(
contrast = contrast,
data = dataPath
),
output_file = paste0(contrast, ".html")
)
}
for (contrast_group in colnames(fit)) {
render_report(contrast=contrast_group, data='fit_dea.Rds')
}
render_report = function(contrast, dataPath) {
rmarkdown::render(
"dea_table_template.Rmd", params = list(
contrast = contrast,
data = dataPath
),
output_file = paste0(contrast, ".html")
)
}
for (contrast_group in colnames(fit)[-1]) {
render_report(contrast=contrast_group, data='fit_dea.Rds')
}
data_long <- exprs(norm_data)[1:4, ] %>%
as.data.frame() %>%
tibble::rownames_to_column("PROBEID") %>%
tidyr::pivot_longer(-PROBEID, names_to = "sample_name", values_to = "E") %>%
dplyr::left_join(fData(norm_data), by = "PROBEID") %>%
dplyr::left_join(pData(norm_data), by = "sample_name")
head(data_long)
plot_boxplots(
data_long,
x = "sample_group",
y = "E",
facet_by = "SYMBOL",
color_by = "sample_group",
main = "Affymetrix",
x_lab = "Sample_Group",
y_lab = "log2(expression intensity)",
do_t_test = FALSE
) +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank()
)
